# this is a check to see if a major is an actual major due to its number of factories
# meaning it's the top 7 in the world or has at least 70% of the average of those 7
# we're also including a number of tags which should act like majors even if they're not in that category
is_actual_major = {
	custom_trigger_tooltip = {
		tooltip = is_actual_major
		is_major = yes

		# rank the majors according to their num_of_factories
		clear_temp_array = global.actual_majors
		get_sorted_scored_countries_temp = {
			scorer = actual_majors_score
			array = global.actual_majors
		}

		# limit that ranking to the top 7
		resize_temp_array = { global.actual_majors = 7 }

		# now figure out what 70% of the average of those 7 is, with a minimum of 35
		set_temp_variable = { global.factory_average = 0 }
		all_of_scopes = {
			array = global.actual_majors
			add_to_temp_variable = { global.factory_average = THIS.num_of_factories }
		}
		divide_temp_variable = { global.factory_average = 7 }
		multiply_temp_variable = { global.factory_average = 0.7 }
		clamp_temp_variable = { var = global.factory_average min = 35 }

		OR = {
			# is actually in the top 7
			is_in_array = { global.actual_majors = THIS }
			# has more than 70% of the average of the top 7
			check_variable = { num_of_factories > global.factory_average }
			# is in the list of "always acts like a major" countries
			tag = GER
			tag = GEX
			tag = AUS
			tag = FRA
			tag = ENG
			tag = GBR
			tag = NFA
			tag = RUS
			tag = SOV
			tag = JAP
			tag = USA
			tag = CSA
			tag = TEX
			tag = PSA
			tag = ENT
		}
	}
}

is_actual_major_without_exceptions = {
	custom_trigger_tooltip = {
		tooltip = is_actual_major_without_exceptions
		is_major = yes

		# rank the majors according to their num_of_factories
		clear_temp_array = global.actual_majors
		get_sorted_scored_countries_temp = {
			scorer = actual_majors_score
			array = global.actual_majors
		}

		# limit that ranking to the top 7
		resize_temp_array = { global.actual_majors = 7 }

		# now figure out what 70% of the average of those 7 is, with a minimum of 35
		set_temp_variable = { global.factory_average = 0 }
		all_of_scopes = {
			array = global.actual_majors
			add_to_temp_variable = { global.factory_average = THIS.num_of_factories }
		}
		divide_temp_variable = { global.factory_average = 7 }
		multiply_temp_variable = { global.factory_average = 0.7 }
		clamp_temp_variable = { var = global.factory_average min = 35 }

		OR = {
			# is actually in the top 7
			is_in_array = { global.actual_majors = THIS }
			# has more than 70% of the average of the top 7
			check_variable = { num_of_factories > global.factory_average }
			# is in the list of "always acts like a major" countries
		}
	}
}

# checks whether the country in scope has the same government as ROOT (the country running the event/focus)
has_same_government_as_ROOT = {
	has_government = var:ROOT.current_party_ideology_group
}

# checks for these three government types for the country in scope
has_socialist_government = {
	custom_trigger_tooltip = {
		tooltip = KR_is_socialist
		OR = {
			has_government = totalist
			has_government = syndicalist
			has_government = radical_socialist
		}
	}
}

# checks for these four government types for the country in scope
has_elected_government = {
	custom_trigger_tooltip = {
		tooltip = KR_is_elected
		OR = {
			has_government = social_democrat
			has_government = social_liberal
			has_government = market_liberal
			has_government = social_conservative
		}
	}
}

# checks for these five government types for the country in scope
has_democratic_government = {
	custom_trigger_tooltip = {
		tooltip = KR_is_democratic
		OR = {
			has_government = social_democrat
			has_government = social_liberal
			has_government = market_liberal
			has_government = social_conservative
			has_government = authoritarian_democrat
		}
	}
}

# checks for these two government types for the country in scope
has_authoritarian_government = {
	custom_trigger_tooltip = {
		tooltip = KR_is_authoritarian
		OR = {
			has_government = authoritarian_democrat
			has_government = paternal_autocrat
			has_government = national_populist
		}
	}
}

# checks for these two government types for the country in scope
has_dictatorship_government = {
	custom_trigger_tooltip = {
		tooltip = KR_is_dictatorship
		OR = {
			has_government = paternal_autocrat
			has_government = national_populist
		}
	}
}

has_right_democratic_government = {
	custom_trigger_tooltip = {
		tooltip = KR_right_wing_democracy
		OR = {
			has_government = social_conservative
			has_government = market_liberal
		}
	}
}

has_left_democratic_government = {
	custom_trigger_tooltip = {
		tooltip = KR_left_wing_democracy
		OR = {
			has_government = social_liberal
			has_government = social_democrat
		}
	}
}

# checks whether the country in scope has the same government type as ROOT (the country running the event/focus)
# note that it's not the exact same government - just the general type, as above
same_government_type_as_ROOT = {
	OR = {
		AND = {
			has_socialist_government = yes
			ROOT = { has_socialist_government = yes }
		}
		AND = {
			has_democratic_government = yes
			ROOT = { has_democratic_government = yes }
		}
		AND = {
			has_dictatorship_government = yes
			ROOT = { has_dictatorship_government = yes }
		}
	}
}

same_government_type_as_ROOT_authoritarian = {
	OR = {
		AND = {
			has_socialist_government = yes
			ROOT = { has_socialist_government = yes }
		}
		AND = {
			has_elected_government = yes
			ROOT = { has_elected_government = yes }
		}
		AND = {
			has_authoritarian_government = yes
			ROOT = { has_authoritarian_government = yes }
		}
	}
}

# Can be used in any country scope (to ensure the country has no owned state which it doesn't control)
controls_all_owned_states = {
	surrender_progress < 0.02
}

# Checks if the country is in a faction or a puppet
is_ally_of_ROOT = {
	custom_trigger_tooltip = {
		tooltip = KR_is_an_ally
		NOT = { tag = ROOT }
		is_ally_with = ROOT
	}
}

is_ally_of_PREV = {
	custom_trigger_tooltip = {
		tooltip = KR_is_an_ally
		NOT = { tag = PREV }
		is_ally_with = PREV
	}
}

# Can be used in state scope, to check if the owner is ROOT or a subject of ROOT
is_owned_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_by_ROOT_or_subject
		owner = {
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the owner is ROOT or an ally/subject of ROOT
is_owned_by_ROOT_or_ally = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_by_ROOT_or_ally
		owner = {
			is_ally_with = ROOT
		}
	}
}

is_owned_by_ROOT_or_war_ally = {
	owner = {
		OR = {
			is_ally_with = ROOT
			has_war_together_with = ROOT
		}
	}
}

# Can be used in state scope, to check if the controller (not owner) is ROOT or a subject of ROOT
is_controlled_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_controlled_by_ROOT_or_subject
		controller = {
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the controller (not owner) is ROOT or ally/subject of ROOT
is_controlled_by_ROOT_or_ally = {
	custom_trigger_tooltip = {
		tooltip = KR_controlled_by_ROOT_or_ally
		controller = {
			is_ally_with = ROOT
		}
	}
}

# Can be used in state scope, to check if the owner and controller is ROOT or a subject of ROOT
is_owned_and_controlled_by_ROOT_or_subject = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_and_controlled_by_ROOT_or_subject
		owner = {
			controls_state = PREV
			OR = {
				tag = ROOT
				is_subject_of = ROOT
			}
		}
	}
}

# Can be used in state scope, to check if the owner and controller is ROOT or a subject of ROOT
is_owned_and_controlled_by_ROOT_or_ally = {
	custom_trigger_tooltip = {
		tooltip = KR_owned_and_controlled_by_ROOT_or_ally
		owner = {
			controls_state = PREV
			is_ally_with = ROOT
		}
	}
}

is_actual_neighbor_of_ROOT_or_ally = {
	any_neighbor_country = {
		is_owner_neighbor_of = PREV
		is_ally_with = ROOT
	}
}

# Used to check whether a country is eligible for peace deal events
is_valid_peace_target = {
	is_subject = no
	OR = {
		is_in_faction = no
		is_faction_leader = yes
	}
}

# in state scope
is_claim_or_core_of_ROOT = {
	OR = {
		is_claimed_by = ROOT
		is_core_of = ROOT
	}
}

is_claim_or_core_of_FROM = {
	OR = {
		is_claimed_by = FROM
		is_core_of = FROM
	}
}

is_not_claim_or_core_of_ROOT = {
	NOT = {
		is_claimed_by = ROOT
		is_core_of = ROOT
	}
}

is_not_claim_or_core_of_FROM = {
	NOT = {
		is_claimed_by = FROM
		is_core_of = FROM
	}
}

is_claim_or_core_of_PREV = {
	OR = {
		is_claimed_by = PREV
		is_core_of = PREV
	}
}

is_claim_or_core_of_owner = {
	OR = {
		is_claimed_by = owner
		is_core_of = owner
	}
}

is_not_claim_or_core_of_PREV = {
	NOT = {
		is_claimed_by = PREV
		is_core_of = PREV
	}
}

has_coalition = {
	has_variable = coalition_partners^num
}

# requires a temp variable coalition_target
has_coalition_with_target = {
	custom_trigger_tooltip = {
		tooltip = has_coalition_with_target
		is_in_array = { coalition_partners = coalition_target }
	}
}

is_metropolis_state = {
	OR = {
		has_state_category = twelve
		has_state_category = eleven
		has_state_category = ten
	}
}

is_valid_state_for_development = {
	impassable = no
	NOT = {
		has_state_category = zero
		has_state_category = zero_island
	}
}

prefer_home_area_states_unless_filled = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					free_building_slots = {
						building = industrial_complex
						size > 0
						include_locked = yes
					}
					is_in_home_area = yes
				}
			}
		}
	}
}

prefer_home_area_states_unless_filled_infrastructure = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					is_in_home_area = yes
					free_building_slots = { building = infrastructure size > 0 include_locked = yes }
				}
			}
		}
	}
}

prefer_home_area_states_unless_filled_dockyard = {
	OR = {
		is_in_home_area = yes
		NOT = {
			owner = {
				any_owned_state = {
					free_building_slots = {
						building = dockyard
						size > 0
						include_locked = yes
					}
					is_in_home_area = yes
				}
			}
		}
	}
}

has_returned_all_expeditionary_forces_of_puppets = {
	if = {
		limit = { num_subjects > 0 }
		custom_trigger_tooltip = {
			tooltip = returned_all_expeditionary_forces_of_puppets
			all_subject_countries = {
				ROOT = { received_expeditionary_forces = { sender = PREV value < 1 } }
			}
		}
	}
}


has_specialist_level_trigger = {
	skill > 5
	skill < 6
}

has_expert_level_trigger = {
	skill > 6
	skill < 7
}

has_genius_level_trigger = {
	skill > 7
}


